// ------------------------------------------------------------------------------
// DelphiQuake, Copyright (C) 2005-2011 by Jim Valavanis
//  E-Mail: jimmyvalavanis@yahoo.gr
//
// Copyright (C) 1996-1997 Id Software, Inc.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
//
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not,  write to the Free Software
// Foundation,  Inc., 59 Temple Place - Suite 330,  Boston,  MA  02111-1307, USA.
//
// ------------------------------------------------------------------------------

{$I dquake.inc}

{$Z4}

unit progdefs;

(* file generated by qcc, do not modify *)

interface

uses
  q_vector,
  pr_comp;

type
  Pglobalvars_t = ^globalvars_t;
  globalvars_t = record
    pad: array[0..27] of integer;
    self: integer;
    other: integer;
    world: integer;
    time: single;
    frametime: single;
    force_retouch: single;
    mapname: string_t;
    deathmatch: single;
    coop: single;
    teamplay: single;
    serverflags: single;
    total_secrets: single;
    total_monsters: single;
    found_secrets: single;
    killed_monsters: single;
    parm1: single;
    parm2: single;
    parm3: single;
    parm4: single;
    parm5: single;
    parm6: single;
    parm7: single;
    parm8: single;
    parm9: single;
    parm10: single;
    parm11: single;
    parm12: single;
    parm13: single;
    parm14: single;
    parm15: single;
    parm16: single;
    v_forward: TVector3f;
    v_up: TVector3f;
    v_right: TVector3f;
    trace_allsolid: single;
    trace_startsolid: single;
    trace_fraction: single;
    trace_endpos: TVector3f;
    trace_plane_normal: TVector3f;
    trace_plane_dist: single;
    trace_ent: integer;
    trace_inopen: single;
    trace_inwater: single;
    msg_entity: integer;
    main: func_t;
    StartFrame: func_t;
    PlayerPreThink: func_t;
    PlayerPostThink: func_t;
    ClientKill: func_t;
    ClientConnect: func_t;
    PutClientInServer: func_t;
    ClientDisconnect: func_t;
    SetNewParms: func_t;
    SetChangeParms: func_t;
  end;

type
  entvars_t = record
    modelindex: single;
    absmin: TVector3f;
    absmax: TVector3f;
    ltime: single;
    movetype: single;
    solid: single;
    origin: TVector3f;
    oldorigin: TVector3f;
    velocity: TVector3f;
    angles: TVector3f;
    avelocity: TVector3f;
    punchangle: TVector3f;
    classname: string_t;
    model: string_t;
    frame: single;
    skin: single;
    effects: single;
    mins: TVector3f;
    maxs: TVector3f;
    size: TVector3f;
    touch: func_t;
    use: func_t;
    think: func_t;
    blocked: func_t;
    nextthink: single;
    groundentity: integer;
    health: single;
    frags: single;
    weapon: single;
    weaponmodel: string_t;
    weaponframe: single;
    currentammo: single;
    ammo_shells: single;
    ammo_nails: single;
    ammo_rockets: single;
    ammo_cells: single;
    items: single;
    takedamage: single;
    chain: integer;
    deadflag: single;
    view_ofs: TVector3f;
    button0: single;
    button1: single;
    button2: single;
    impulse: single;
    fixangle: single;
    v_angle: TVector3f;
    idealpitch: single;
    netname: string_t;
    enemy: integer;
    flags: single;
    colormap: single;
    team: single;
    max_health: single;
    teleport_time: single;
    armortype: single;
    armorvalue: single;
    waterlevel: single;
    watertype: single;
    ideal_yaw: single;
    yaw_speed: single;
    aiment: integer;
    goalentity: integer;
    spawnflags: single;
    target: string_t;
    targetname: string_t;
    dmg_take: single;
    dmg_save: single;
    dmg_inflictor: integer;
    owner: integer;
    movedir: TVector3f;
    _message: string_t;
    sounds: single;
    noise: string_t;
    noise1: string_t;
    noise2: string_t;
    noise3: string_t;
  end;

const
  PROGHEADER_CRC = 5927;

implementation

end.
